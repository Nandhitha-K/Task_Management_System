@model IEnumerable<TaskLibrary.Model.Tasks>

@{
    ViewData["Title"] = "Index";
    var name = ViewBag.UserName;
}

<h1 class="text-center">Task List</h1>
<style>
    body{
    background-color: #f8f9fa;
    margin-bottom: 60px;
    background-image: url('../Images/index.jpg');
    background-size: cover;
    background-repeat: no-repeat;
    }

    btn.btn-sm.btn-outline-primary.me-2 {
        color: #fff; 
        background-color: #8B4513; 
        border-color: #8B4513; 
    }

    .btn.btn-sm.btn-outline-primary.me-2:hover {
        background-color: #A0522D; 
        border-color: #A0522D;

</style>
 
    @{
        var login = TempData["Login"] as bool?;
    }
    @if(login.HasValue && login.Value)
    {
        <div id="SuccessMessage" class="alert alert-success" role="alert">
        Login successful
        </div>
    }
    
 

<div class="container mt-5">
    <div class="row">
        <div style="display:flex; gap:10px">
            <div>
                <div>
                    <a class="btn btn-sm btn-dark mr-1" asp-action="Create">Create New Task</a>
                </div>
            </div>
            <div>
                <div class="d-flex justify-content-md-start justify-content-center">
                    @Html.ActionLink("View By Start Date Of The Task", "GetStartDateAndUser", new { }, new { @class = "btn btn-sm btn-dark mr-1" })
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>Task Title</th>
                        <th>Status Type</th>
                        <th>Start Date</th>
                        <th>End Date</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.TaskTitle)</td>
                            <td>@Html.DisplayFor(modelItem => item.StatusType)</td>
                            <td>@Html.DisplayFor(modelItem => item.StartDate)</td>
                            <td>@Html.DisplayFor(modelItem => item.EndDate)</td>
                            <td>@Html.DisplayFor(modelItem => item.Description)</td>
                            <td>
                                @Html.ActionLink("Edit", "Edit", new { taskid = item.TaskId }, new { @class = "btn btn-sm btn-outline-secondary me-2",title="Edit" })
                                @Html.ActionLink("Details", "Details", new { taskid = item.TaskId }, new { @class = "btn btn-sm btn-outline-dark me-2", title = "Details" })
                                @Html.ActionLink("Delete", "Delete", new { taskid = item.TaskId }, new { @class = "btn btn-sm btn-outline-danger me-2", title = "Delete" })

                                @{
                                    DateTime temp = item.StartDate.GetValueOrDefault();
                                    DateTime reminderTime = temp.AddMinutes(-30);
                                    reminderTime = new DateTime(reminderTime.Year, reminderTime.Month, reminderTime.Day, reminderTime.Hour, reminderTime.Minute, 0);
                                    temp = new DateTime(reminderTime.Year, reminderTime.Month, reminderTime.Day, reminderTime.Hour, reminderTime.Minute, 0);
                                    DateTime currentDateTime = DateTime.Now;
                                    currentDateTime = new DateTime(currentDateTime.Year, currentDateTime.Month, currentDateTime.Day, currentDateTime.Hour, currentDateTime.Minute, 0);
                                }
                                @if (reminderTime == currentDateTime)
                                {
                                    <button class="btn btn-sm btn-warning mr-1" onclick="showAlert()">Notification</button>
                                    <script>
                                        function showAlert() {
                                            alert("It's time for your task!");
                                        }
                                    </script>
                                }
                                else
                                {
                                    //<button class="btn btn-sm btn-info mr-1">Notification</button>
                                    @Html.ActionLink("Notification", "Notification", new { startdate = item.StartDate }, new { @class = "btn btn-sm btn-outline-dark me-2", title = "Notification"})
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
@section scripts {
    <script type="text/javascript">
        // Establish a connection to the SignalR hub
        var connection = $.hubConnection();
        var hubProxy = connection.createHubProxy('NotificationHub');

        // Define an event handler for the trigger signal
        hubProxy.on('ReceiveNotification', function () {
            // Handle the trigger signal - for example, logging a message
            alert('Received trigger signal');
        });

        // Start the connection to the SignalR hub
        connection.start().done(function () {
            // Connection to SignalR hub established
            // Perform additional setup if needed
        });
        /* // Hide the success message after 5 seconds
            setTimeout(function () {
            var SuccessMessage = document.getElementById('SuccessMessage');
            if (SuccessMessage) {
                SuccessMessage.style.display = 'none';
            }
        }, 3000); // 5000 milliseconds = 5 seconds */
    </script>
}